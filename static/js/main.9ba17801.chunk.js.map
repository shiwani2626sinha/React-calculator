{"version":3,"sources":["Keys.js","logo.svg","App.js","serviceWorker.js","index.js"],"names":["Keys","props","state","expression","expressionHandler","bind","clearHandler","resultHandler","e","preventDefault","item","target","value","newExpression","this","concat","setState","oldExpression","result","eval","toString","className","onClick","Component","module","exports","App","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9ba17801.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Keys.css';\r\nimport {button} from 'react-bootstrap';\r\nimport {Container, Row, Col} from 'reactstrap';\r\n\r\nexport default class Keys extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.state = {\r\n             expression:''\r\n            \r\n        }\r\n        this.expressionHandler = this.expressionHandler.bind(this);\r\n        this.clearHandler = this. clearHandler. bind(this);\r\n        this.resultHandler = this. resultHandler.bind(this);\r\n    }\r\n\r\n\r\n    expressionHandler(e) {\r\n        e.preventDefault();\r\n        //const oldExpression = this.state.expression;\r\n        const item = e.target.value;\r\n        const newExpression =this.state.expression.concat(item);\r\n        this.setState({\r\n            expression: newExpression\r\n        })\r\n\r\n    }\r\n    clearHandler(e){\r\n        this.setState({\r\n            expression:''\r\n        })\r\n    }\r\n    resultHandler(e){\r\n        e.preventDefault();\r\n        const oldExpression = this.state.expression;\r\n        const result= eval(oldExpression);\r\n        this.setState({\r\n            expression:result.toString()\r\n           \r\n        })\r\n    }\r\n    render() {\r\n       \r\n        \r\n        return (\r\n            <div>\r\n                <div className=\"screen\">\r\n                    <p className=\"result\">{this.state.expression}</p>\r\n                </div>\r\n                    <div className=\"key\">\r\n                        <Container className=\"abc\">\r\n                            <Row>\r\n                                <Col>    \r\n                                <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"1\">1</button>\r\n                                </Col>\r\n                                <Col> \r\n                                <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"2\">2</button>\r\n                                </Col>\r\n                                <Col>\r\n                                <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"3\">3</button>\r\n                                </Col>\r\n                                <Col>\r\n                                <button className=\"btn-primary1\" onClick= {this.clearHandler}>AC</button>\r\n                                </Col>\r\n                            </Row>\r\n                            <Row className=\"rowmargin\">\r\n                                <Col>\r\n                                <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"4\">4</button>\r\n                                </Col>\r\n                                <Col>\r\n                                <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"5\">5</button>\r\n                                </Col>\r\n                                <Col>\r\n                                <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"6\">6</button>\r\n                                </Col>    \r\n                                <Col>    \r\n                                <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"/\">/</button>\r\n                                </Col>\r\n                            </Row>        \r\n                             <Row className=\"rowmargin\">\r\n                             <Col>\r\n                             <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"7\">7</button>\r\n                             </Col>\r\n                             <Col>\r\n                             <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"8\">8</button>\r\n                             </Col>\r\n                             <Col>\r\n                             <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"9\">9</button>\r\n                             </Col>\r\n                             <Col>\r\n                            <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"*\">*</button>\r\n                            </Col>\r\n                             </Row> \r\n                             <Row className=\"rowmargin\">\r\n                                    \r\n                            <Col><button className=\"btn-primary1\" onClick={this.resultHandler}>=</button></Col>\r\n                            <Col>\r\n                            <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"0\">0</button></Col>\r\n                            <Col>\r\n                            <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"-\">-</button>\r\n                            </Col>\r\n                            <Col>\r\n                                <button className=\"btn-primary1\" onClick= {this.expressionHandler} value=\"+\">+</button>\r\n                             </Col>\r\n                             </Row>      \r\n                             \r\n                        </Container>\r\n                    </div>\r\n                    \r\n                </div>\r\n                    \r\n        )\r\n    }\r\n}\r\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Keys from './Keys'\n\nclass App extends React.Component{\n  \n    render(){\n    return(\n      <div className=\"App\">\n        <Keys></Keys>\n\n      </div>\n     \n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}